#!/bin/sh
# Copyright (C) 2014 Julien Bonjean <julien@bonjean.info>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# BUG: THRE IS NO WAY TO SOURCE A FILE.
#      i3blocks does not even respect which environment
# that is running the script, always run with user default
# shell script.
# ANY VARS DECLARED IN ANOTHER SOURCE FILE WON'T WORK.
# . sys.conf

fa_microship='\U000f2db'
fa_exchange='\U000f0ec'

GRAY="#808080"
#DEFAULT_FGCOLOR="#53ff1a"
DEFAULT_FGCOLOR="$GRAY"
DEF_ICON_COLOR="$GRAY"

get_memory_stats() {
	local type=$1

	awk -v type=$type '
		/^MemTotal:/ {
			mem_total=$2
		}
		/^MemFree:/ {
			mem_free=$2
		}
		/^Buffers:/ {
			mem_free+=$2
		}
		/^Cached:/ {
			mem_free+=$2
		}
		/^SwapTotal:/ {
			swap_total=$2
		}
		/^SwapFree:/ {
			swap_free=$2
		}
		END {
            switch (type) {
            case "swap":
                 #swap_total=1048576
                 if (swap_total != 0) {
                    swap_free=524288
			        free=swap_free
			        used=swap_total-swap_free
			        total=swap_total
                 } else {
                   used  = 0;
                   total = 0.1;  # force not division by 0
                   pct   = 0;
                 }
            break

            case "mem":
			   free=mem_free
			   used=mem_total-mem_free
			   total=mem_total
            break
            default:
            break
            }
			pct=(used/total)*100

			# full text
			printf("%u %u %.1f%%\n", used, total, pct)

			# short text
			#printf("%.f%%\n", pct)

			# color
			# if (pct > 90) {
			# 	print("#FF0000\n")
			# } else if (pct > 80) {
			# 	print("#FFAE00\n")
			# } else if (pct > 70) {
			# 	print("#FFF600\n")
			# }
	    }
		' /proc/meminfo
}

#
# Description:
#   This function returns the value passed as $1 in:
#   KB, MB and GB
#
# param:
#   $1 - value in KB (/proc/meminfo always returns in KB).
#
# return: string with value in KB, MB and GB with units at end.
#
GetHummanReadble() {
	local KB=$1
	local ret=""

	if [ $KB -le 1024 ]; then      # less or equal than MB, it is KB
        ret="${KB} KB"
	elif [ $KB -le 1048576 ]; then # less or equal than GB, it is MB
		ret=$(echo "scale=2; $KB / 1024" | bc -l)
        ret="${ret} MB"
	else                           # it is GB
        ret=$(echo "scale=2; $KB / 1048576" | bc -l)
        ret="${ret} GB"
    fi

    echo "$ret"
}

#
# Get memory usage
#
read used total rate_used <<<$(get_memory_stats mem)
mem_usage="$(GetHummanReadble $used)/$(GetHummanReadble $total) $rate_used"

#
# Build output notifucation
#
notify="<span foreground='$DEF_ICON_COLOR' size='large'>$fa_microship</span> <span foreground='$DEFAULT_FGCOLOR' size='small'>$mem_usage </span>"

#
# Get swap usage
#
read used total rate_used <<<$(get_memory_stats swap)
if [ $used -gt 0 ]; then
    swap_usage="$(GetHummanReadble $used)/$(GetHummanReadble $total) $rate_used"
    # Build notification
	notify="${notify} <span foreground='$DEF_ICON_COLOR' size='large'>$fa_exchange</span> <span foreground='$DEFAULT_FGCOLOR' size='small'>$swap_usage </span>"
fi

echo -e "$notify"

exit 0
